
counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005e  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000286  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000143  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000029e  00000000  00000000  0000066d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f1  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000091  00000000  00000000  00000a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  8a:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <counter_init>:
     lcd_data(a1+48);
	 pos--;//0x81//0x80
  }
}
void counter_init()
{
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	83 bf       	out	0x33, r24	; 51
  TCCR0=0b00000110;
  TCNT0=0;
  96:	12 be       	out	0x32, r1	; 50
}
  98:	08 95       	ret

0000009a <lcd_command>:
 lcd_command(0x02); lcd_command(0x28); lcd_command(0x0E);
}


void lcd_command(char cmd)
{
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	22 bb       	out	0x12, r18	; 18
  PORTD= cmd & 0xf0;

  PORTD=PORTD &~(1<<rs);
  a0:	90 98       	cbi	0x12, 0	; 18
  PORTD=PORTD &~(1<<rw);
  a2:	91 98       	cbi	0x12, 1	; 18
  PORTD=PORTD |(1<<en);
  a4:	92 9a       	sbi	0x12, 2	; 18
  PORTD=PORTD &~(1<<en);
  a6:	92 98       	cbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	2a ef       	ldi	r18, 0xFA	; 250
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_command+0x14>
  _delay_ms(1);

  PORTD= (cmd<<4)&0xf0;
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	44 e0       	ldi	r20, 0x04	; 4
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	4a 95       	dec	r20
  bc:	e1 f7       	brne	.-8      	; 0xb6 <lcd_command+0x1c>
  be:	82 bb       	out	0x12, r24	; 18
  PORTD=PORTD &~(1<<rs);
  c0:	90 98       	cbi	0x12, 0	; 18
  PORTD=PORTD &~(1<<rw);
  c2:	91 98       	cbi	0x12, 1	; 18
  PORTD=PORTD |(1<<en);
  c4:	92 9a       	sbi	0x12, 2	; 18
  PORTD=PORTD &~(1<<en);
  c6:	92 98       	cbi	0x12, 2	; 18
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_command+0x30>

  _delay_ms(1);
}
  ce:	08 95       	ret

000000d0 <lcd_init>:
{
  TCCR0=0b00000110;
  TCNT0=0;
}
void lcd_init()
{
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
 DDRD=0xff;
 lcd_command(0x02); lcd_command(0x28); lcd_command(0x0E);
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_command>
  da:	88 e2       	ldi	r24, 0x28	; 40
  dc:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_command>
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_command>
}
  e6:	08 95       	ret

000000e8 <lcd_data>:
  _delay_ms(1);
}


void lcd_data(char x)
{
  e8:	28 2f       	mov	r18, r24
  ea:	20 7f       	andi	r18, 0xF0	; 240
  ec:	22 bb       	out	0x12, r18	; 18
  PORTD= x&0xf0;
  PORTD=PORTD |(1<<rs);
  ee:	90 9a       	sbi	0x12, 0	; 18
  PORTD=PORTD &~(1<<rw);
  f0:	91 98       	cbi	0x12, 1	; 18
  PORTD=PORTD |(1<<en);
  f2:	92 9a       	sbi	0x12, 2	; 18
  PORTD=PORTD &~(1<<en);
  f4:	92 98       	cbi	0x12, 2	; 18
  f6:	2a ef       	ldi	r18, 0xFA	; 250
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x14>
  _delay_ms(1);

   PORTD= (x<<4)&0xf0;
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	54 e0       	ldi	r21, 0x04	; 4
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	5a 95       	dec	r21
 10a:	e1 f7       	brne	.-8      	; 0x104 <lcd_data+0x1c>
 10c:	82 bb       	out	0x12, r24	; 18
  PORTD=PORTD |(1<<rs);
 10e:	90 9a       	sbi	0x12, 0	; 18
  PORTD=PORTD &~(1<<rw);
 110:	91 98       	cbi	0x12, 1	; 18
  PORTD=PORTD |(1<<en);
 112:	92 9a       	sbi	0x12, 2	; 18
  PORTD=PORTD &~(1<<en);
 114:	92 98       	cbi	0x12, 2	; 18
 116:	c9 01       	movw	r24, r18
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_data+0x30>
  _delay_ms(1);
}
 11c:	08 95       	ret

0000011e <b2a>:
	  b2a(TCNT0);
	}while( (TIFR&(1<<TOV0))==0);
  }
}
void b2a(int a)//254
{
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	f8 2e       	mov	r15, r24
 128:	09 2f       	mov	r16, r25
 12a:	12 e8       	ldi	r17, 0x82	; 130
  int a1,i=0;char pos=0x82;
  for(i=0;i<=2;i++)
  {
     a1=a%10;//   4//5//2
 12c:	8f 2d       	mov	r24, r15
 12e:	90 2f       	mov	r25, r16
 130:	6a e0       	ldi	r22, 0x0A	; 10
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	0e 94 c0 00 	call	0x180	; 0x180 <__divmodhi4>
 138:	e8 2e       	mov	r14, r24
	 a=a/10; //   25 //2//0
 13a:	8f 2d       	mov	r24, r15
 13c:	90 2f       	mov	r25, r16
 13e:	6a e0       	ldi	r22, 0x0A	; 10
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 c0 00 	call	0x180	; 0x180 <__divmodhi4>
 146:	f6 2e       	mov	r15, r22
 148:	07 2f       	mov	r16, r23
   	 lcd_command(pos);
 14a:	81 2f       	mov	r24, r17
 14c:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_command>
     lcd_data(a1+48);
 150:	8e 2d       	mov	r24, r14
 152:	80 5d       	subi	r24, 0xD0	; 208
 154:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_data>
	 pos--;//0x81//0x80
 158:	11 50       	subi	r17, 0x01	; 1
  }
}
void b2a(int a)//254
{
  int a1,i=0;char pos=0x82;
  for(i=0;i<=2;i++)
 15a:	1f 37       	cpi	r17, 0x7F	; 127
 15c:	39 f7       	brne	.-50     	; 0x12c <b2a+0xe>
	 a=a/10; //   25 //2//0
   	 lcd_command(pos);
     lcd_data(a1+48);
	 pos--;//0x81//0x80
  }
}
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	08 95       	ret

00000168 <main>:
void lcd_init();
void b2a(int );
void counter_init();
void lcd_init();
void main()
{
 168:	b8 9a       	sbi	0x17, 0	; 23
  
  DDRB=DDRB|(1<<0);
  lcd_init();
 16a:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_init>
	 pos--;//0x81//0x80
  }
}
void counter_init()
{
  TCCR0=0b00000110;
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	83 bf       	out	0x33, r24	; 51
  TCNT0=0;
 172:	12 be       	out	0x32, r1	; 50
  
  while(1)
  {
    do
	{ 
	  b2a(TCNT0);
 174:	82 b7       	in	r24, 0x32	; 50
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 8f 00 	call	0x11e	; 0x11e <b2a>
	}while( (TIFR&(1<<TOV0))==0);
 17c:	88 b7       	in	r24, 0x38	; 56
 17e:	fa cf       	rjmp	.-12     	; 0x174 <main+0xc>

00000180 <__divmodhi4>:
 180:	97 fb       	bst	r25, 7
 182:	09 2e       	mov	r0, r25
 184:	07 26       	eor	r0, r23
 186:	0a d0       	rcall	.+20     	; 0x19c <__divmodhi4_neg1>
 188:	77 fd       	sbrc	r23, 7
 18a:	04 d0       	rcall	.+8      	; 0x194 <__divmodhi4_neg2>
 18c:	0c d0       	rcall	.+24     	; 0x1a6 <__udivmodhi4>
 18e:	06 d0       	rcall	.+12     	; 0x19c <__divmodhi4_neg1>
 190:	00 20       	and	r0, r0
 192:	1a f4       	brpl	.+6      	; 0x19a <__divmodhi4_exit>

00000194 <__divmodhi4_neg2>:
 194:	70 95       	com	r23
 196:	61 95       	neg	r22
 198:	7f 4f       	sbci	r23, 0xFF	; 255

0000019a <__divmodhi4_exit>:
 19a:	08 95       	ret

0000019c <__divmodhi4_neg1>:
 19c:	f6 f7       	brtc	.-4      	; 0x19a <__divmodhi4_exit>
 19e:	90 95       	com	r25
 1a0:	81 95       	neg	r24
 1a2:	9f 4f       	sbci	r25, 0xFF	; 255
 1a4:	08 95       	ret

000001a6 <__udivmodhi4>:
 1a6:	aa 1b       	sub	r26, r26
 1a8:	bb 1b       	sub	r27, r27
 1aa:	51 e1       	ldi	r21, 0x11	; 17
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <__udivmodhi4_ep>

000001ae <__udivmodhi4_loop>:
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	a6 17       	cp	r26, r22
 1b4:	b7 07       	cpc	r27, r23
 1b6:	10 f0       	brcs	.+4      	; 0x1bc <__udivmodhi4_ep>
 1b8:	a6 1b       	sub	r26, r22
 1ba:	b7 0b       	sbc	r27, r23

000001bc <__udivmodhi4_ep>:
 1bc:	88 1f       	adc	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	5a 95       	dec	r21
 1c2:	a9 f7       	brne	.-22     	; 0x1ae <__udivmodhi4_loop>
 1c4:	80 95       	com	r24
 1c6:	90 95       	com	r25
 1c8:	bc 01       	movw	r22, r24
 1ca:	cd 01       	movw	r24, r26
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
