
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  00000212  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005d  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000038c  00000000  00000000  000003d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000163  00000000  00000000  00000763  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003af  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fa  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000200  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000240  00000000  00000000  00000fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 33       	cpi	r26, 0x34	; 52
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 e3       	ldi	r26, 0x34	; 52
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 33       	cpi	r26, 0x34	; 52
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  8a:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <usart_init>:
  {
   i2c_data();
   }
}
void usart_init()
{
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
  UBRRL=51;
  UCSRB=UCSRB|(1<<TXEN);
  96:	53 9a       	sbi	0x0a, 3	; 10
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
}
  9e:	08 95       	ret

000000a0 <ack>:
void ack(char *x)
{
  a0:	fc 01       	movw	r30, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a2:	20 ed       	ldi	r18, 0xD0	; 208
  a4:	37 e0       	ldi	r19, 0x07	; 7
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <ack+0x16>
  while( *x != '\0')
  {
    UDR=*x++;
  a8:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ack+0xa>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
  ae:	31 96       	adiw	r30, 0x01	; 1
  b0:	c9 01       	movw	r24, r18
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <ack+0x12>
  UCSRB=UCSRB|(1<<TXEN);
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}
void ack(char *x)
{
  while( *x != '\0')
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	b1 f7       	brne	.-20     	; 0xa8 <ack+0x8>
  {
    UDR=*x++;
	while( (UCSRA&(1<<UDRE))==0);
    _delay_ms(1);
  }
}
  bc:	08 95       	ret

000000be <i2c_start>:

void i2c_start()
{
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	80 b9       	out	0x00, r24	; 0
  TWBR=8;
  TWCR=TWCR|(1<<TWINT)|(1<<TWEA)|(1<<TWEN)|(1<<TWSTA);
  c2:	86 b7       	in	r24, 0x36	; 54
  c4:	84 6e       	ori	r24, 0xE4	; 228
  c6:	86 bf       	out	0x36, r24	; 54
  while( (TWCR&(1<<TWINT))==0);
  c8:	06 b6       	in	r0, 0x36	; 54
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <i2c_start+0xa>
  if( (TWSR&0xf8)==0x08)
  ce:	81 b1       	in	r24, 0x01	; 1
  d0:	88 7f       	andi	r24, 0xF8	; 248
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	29 f0       	breq	.+10     	; 0xe0 <i2c_start+0x22>
  d6:	e0 e6       	ldi	r30, 0x60	; 96
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	20 ed       	ldi	r18, 0xD0	; 208
  dc:	37 e0       	ldi	r19, 0x07	; 7
  de:	17 c0       	rjmp	.+46     	; 0x10e <i2c_start+0x50>
  e0:	eb e7       	ldi	r30, 0x7B	; 123
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	20 ed       	ldi	r18, 0xD0	; 208
  e6:	37 e0       	ldi	r19, 0x07	; 7
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <i2c_start+0x3a>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
  ea:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <i2c_start+0x2e>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
  f0:	31 96       	adiw	r30, 0x01	; 1
  f2:	c9 01       	movw	r24, r18
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <i2c_start+0x36>
  UCSRB=UCSRB|(1<<TXEN);
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}
void ack(char *x)
{
  while( *x != '\0')
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	b1 f7       	brne	.-20     	; 0xea <i2c_start+0x2c>
  fe:	08 95       	ret
  {
    UDR=*x++;
 100:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
 102:	5d 9b       	sbis	0x0b, 5	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <i2c_start+0x44>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
 106:	31 96       	adiw	r30, 0x01	; 1
 108:	c9 01       	movw	r24, r18
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <i2c_start+0x4c>
  UCSRB=UCSRB|(1<<TXEN);
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}
void ack(char *x)
{
  while( *x != '\0')
 10e:	80 81       	ld	r24, Z
 110:	88 23       	and	r24, r24
 112:	b1 f7       	brne	.-20     	; 0x100 <i2c_start+0x42>
 114:	08 95       	ret

00000116 <i2c_address>:
  else
  ack("Error in START condition \r");
}

void i2c_address()
{
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	83 b9       	out	0x03, r24	; 3
  TWDR=0x40;
  TWCR=TWCR|(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
 11a:	86 b7       	in	r24, 0x36	; 54
 11c:	84 6c       	ori	r24, 0xC4	; 196
 11e:	86 bf       	out	0x36, r24	; 54
  while( (TWCR&(1<<TWINT))==0);
 120:	06 b6       	in	r0, 0x36	; 54
 122:	07 fe       	sbrs	r0, 7
 124:	fd cf       	rjmp	.-6      	; 0x120 <i2c_address+0xa>
  if( (TWSR&0xf8)==0x18)
 126:	81 b1       	in	r24, 0x01	; 1
 128:	88 7f       	andi	r24, 0xF8	; 248
 12a:	88 31       	cpi	r24, 0x18	; 24
 12c:	29 f0       	breq	.+10     	; 0x138 <i2c_address+0x22>
 12e:	e3 ea       	ldi	r30, 0xA3	; 163
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	20 ed       	ldi	r18, 0xD0	; 208
 134:	37 e0       	ldi	r19, 0x07	; 7
 136:	17 c0       	rjmp	.+46     	; 0x166 <i2c_address+0x50>
 138:	e5 eb       	ldi	r30, 0xB5	; 181
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	20 ed       	ldi	r18, 0xD0	; 208
 13e:	37 e0       	ldi	r19, 0x07	; 7
 140:	07 c0       	rjmp	.+14     	; 0x150 <i2c_address+0x3a>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
 142:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
 144:	5d 9b       	sbis	0x0b, 5	; 11
 146:	fe cf       	rjmp	.-4      	; 0x144 <i2c_address+0x2e>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
 148:	31 96       	adiw	r30, 0x01	; 1
 14a:	c9 01       	movw	r24, r18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <i2c_address+0x36>
  UCSRB=UCSRB|(1<<TXEN);
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}
void ack(char *x)
{
  while( *x != '\0')
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	b1 f7       	brne	.-20     	; 0x142 <i2c_address+0x2c>
 156:	08 95       	ret
  {
    UDR=*x++;
 158:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
 15a:	5d 9b       	sbis	0x0b, 5	; 11
 15c:	fe cf       	rjmp	.-4      	; 0x15a <i2c_address+0x44>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
 15e:	31 96       	adiw	r30, 0x01	; 1
 160:	c9 01       	movw	r24, r18
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <i2c_address+0x4c>
  UCSRB=UCSRB|(1<<TXEN);
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}
void ack(char *x)
{
  while( *x != '\0')
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	b1 f7       	brne	.-20     	; 0x158 <i2c_address+0x42>
 16c:	08 95       	ret

0000016e <i2c_data>:
  ack("SLA+W has been transmitted,ACK has been received\r");
  else
  ack("Error in SLA+W  \r");
}
void i2c_data()
{
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 int i;
 for(i=0;i<=7;i++)
 {
	  TWDR=(1<<i);
 172:	a1 e0       	ldi	r26, 0x01	; 1
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	40 ed       	ldi	r20, 0xD0	; 208
 178:	57 e0       	ldi	r21, 0x07	; 7
 17a:	68 ec       	ldi	r22, 0xC8	; 200
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	cd 01       	movw	r24, r26
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <i2c_data+0x1a>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <i2c_data+0x16>
 18c:	83 b9       	out	0x03, r24	; 3
	  TWCR=TWCR|(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
 18e:	86 b7       	in	r24, 0x36	; 54
 190:	84 6c       	ori	r24, 0xC4	; 196
 192:	86 bf       	out	0x36, r24	; 54
	  while( (TWCR&(1<<TWINT))==0);
 194:	06 b6       	in	r0, 0x36	; 54
 196:	07 fe       	sbrs	r0, 7
 198:	fd cf       	rjmp	.-6      	; 0x194 <i2c_data+0x26>
	  if( (TWSR&0xf8)==0x28)
 19a:	81 b1       	in	r24, 0x01	; 1
 19c:	88 7f       	andi	r24, 0xF8	; 248
 19e:	88 32       	cpi	r24, 0x28	; 40
 1a0:	19 f0       	breq	.+6      	; 0x1a8 <i2c_data+0x3a>
 1a2:	e7 ee       	ldi	r30, 0xE7	; 231
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	15 c0       	rjmp	.+42     	; 0x1d2 <i2c_data+0x64>
 1a8:	ee ef       	ldi	r30, 0xFE	; 254
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <i2c_data+0x4e>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
 1ae:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
 1b0:	5d 9b       	sbis	0x0b, 5	; 11
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <i2c_data+0x42>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
 1b4:	31 96       	adiw	r30, 0x01	; 1
 1b6:	ca 01       	movw	r24, r20
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <i2c_data+0x4a>
  UCSRB=UCSRB|(1<<TXEN);
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}
void ack(char *x)
{
  while( *x != '\0')
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	b1 f7       	brne	.-20     	; 0x1ae <i2c_data+0x40>
 1c2:	0a c0       	rjmp	.+20     	; 0x1d8 <i2c_data+0x6a>
  {
    UDR=*x++;
 1c4:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
 1c6:	5d 9b       	sbis	0x0b, 5	; 11
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <i2c_data+0x58>
}
void ack(char *x)
{
  while( *x != '\0')
  {
    UDR=*x++;
 1ca:	31 96       	adiw	r30, 0x01	; 1
 1cc:	ca 01       	movw	r24, r20
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <i2c_data+0x60>
  UCSRB=UCSRB|(1<<TXEN);
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}
void ack(char *x)
{
  while( *x != '\0')
 1d2:	80 81       	ld	r24, Z
 1d4:	88 23       	and	r24, r24
 1d6:	b1 f7       	brne	.-20     	; 0x1c4 <i2c_data+0x56>
 1d8:	88 ee       	ldi	r24, 0xE8	; 232
 1da:	93 e0       	ldi	r25, 0x03	; 3
 1dc:	fb 01       	movw	r30, r22
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <i2c_data+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e4:	d9 f7       	brne	.-10     	; 0x1dc <i2c_data+0x6e>
  ack("Error in SLA+W  \r");
}
void i2c_data()
{
 int i;
 for(i=0;i<=7;i++)
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	28 30       	cpi	r18, 0x08	; 8
 1ec:	31 05       	cpc	r19, r1
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <i2c_data+0x84>
 1f0:	c6 cf       	rjmp	.-116    	; 0x17e <i2c_data+0x10>
	  else
	  ack("Error it Data writing\r");
	 _delay_ms(100);
 }
 
}
 1f2:	08 95       	ret

000001f4 <main>:
void usart_init();
void i2c_start();
void i2c_address();
void i2c_data();
int main()
{
 1f4:	83 e3       	ldi	r24, 0x33	; 51
 1f6:	89 b9       	out	0x09, r24	; 9
   }
}
void usart_init()
{
  UBRRL=51;
  UCSRB=UCSRB|(1<<TXEN);
 1f8:	53 9a       	sbi	0x0a, 3	; 10
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 1fa:	80 b5       	in	r24, 0x20	; 32
 1fc:	86 68       	ori	r24, 0x86	; 134
 1fe:	80 bd       	out	0x20, r24	; 32
void i2c_data();
int main()
{
  
  usart_init();
  i2c_start();
 200:	0e 94 5f 00 	call	0xbe	; 0xbe <i2c_start>
  i2c_address();
 204:	0e 94 8b 00 	call	0x116	; 0x116 <i2c_address>
  while(1)
  {
   i2c_data();
 208:	0e 94 b7 00 	call	0x16e	; 0x16e <i2c_data>
 20c:	fd cf       	rjmp	.-6      	; 0x208 <main+0x14>

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
