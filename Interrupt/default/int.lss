
int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  0000029c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007c  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000359  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000171  00000000  00000000  00000691  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000349  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000107  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012e  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  8a:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
void lcd_init();
void lcd_init();

int i;
ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	48 ec       	ldi	r20, 0xC8	; 200
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	12 c0       	rjmp	.+36     	; 0xda <__vector_1+0x48>
  for(i=0;i<=2;i++)
  {
    PORTB=PORTB|(1<<0);
  b6:	c0 9a       	sbi	0x18, 0	; 24
  b8:	80 e1       	ldi	r24, 0x10	; 16
  ba:	97 e2       	ldi	r25, 0x27	; 39
  bc:	fa 01       	movw	r30, r20
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <__vector_1+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c4:	d9 f7       	brne	.-10     	; 0xbc <__vector_1+0x2a>
	_delay_ms(1000);
	PORTB=PORTB &~ (1<<0);
  c6:	c0 98       	cbi	0x18, 0	; 24
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	97 e2       	ldi	r25, 0x27	; 39
  cc:	fa 01       	movw	r30, r20
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <__vector_1+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <__vector_1+0x3a>
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
void lcd_init();

int i;
ISR(INT0_vect)
{
  for(i=0;i<=2;i++)
  da:	23 30       	cpi	r18, 0x03	; 3
  dc:	31 05       	cpc	r19, r1
  de:	5c f3       	brlt	.-42     	; 0xb6 <__vector_1+0x24>
  e0:	30 93 71 00 	sts	0x0071, r19
  e4:	20 93 70 00 	sts	0x0070, r18
    PORTB=PORTB|(1<<0);
	_delay_ms(1000);
	PORTB=PORTB &~ (1<<0);
	_delay_ms(1000);
  }
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	5f 91       	pop	r21
  f2:	4f 91       	pop	r20
  f4:	3f 91       	pop	r19
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <interrupt_init>:
void interrupt_init()
{
  GICR=GICR|(1<<INT0);
 102:	8b b7       	in	r24, 0x3b	; 59
 104:	80 64       	ori	r24, 0x40	; 64
 106:	8b bf       	out	0x3b, r24	; 59
  MCUCR=MCUCR|(1<<ISC00);
 108:	85 b7       	in	r24, 0x35	; 53
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	85 bf       	out	0x35, r24	; 53
  sei();
 10e:	78 94       	sei
}
 110:	08 95       	ret

00000112 <lcd_command>:
}


void lcd_command(char cmd)
{
  PORTA= cmd & 0xf0;
 112:	28 2f       	mov	r18, r24
 114:	20 7f       	andi	r18, 0xF0	; 240
 116:	2b bb       	out	0x1b, r18	; 27

  PORTA=PORTA &~(1<<rs);
 118:	d8 98       	cbi	0x1b, 0	; 27
  PORTA=PORTA &~(1<<rw);
 11a:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA |(1<<en);
 11c:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
 11e:	da 98       	cbi	0x1b, 2	; 27
 120:	20 ed       	ldi	r18, 0xD0	; 208
 122:	37 e0       	ldi	r19, 0x07	; 7
 124:	f9 01       	movw	r30, r18
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_command+0x14>
  _delay_ms(1);

  PORTA= (cmd<<4)&0xf0;
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	44 e0       	ldi	r20, 0x04	; 4
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	4a 95       	dec	r20
 134:	e1 f7       	brne	.-8      	; 0x12e <lcd_command+0x1c>
 136:	8b bb       	out	0x1b, r24	; 27
  PORTA=PORTA &~(1<<rs);
 138:	d8 98       	cbi	0x1b, 0	; 27
  PORTA=PORTA &~(1<<rw);
 13a:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA |(1<<en);
 13c:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
 13e:	da 98       	cbi	0x1b, 2	; 27
 140:	c9 01       	movw	r24, r18
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_command+0x30>

  _delay_ms(1);
}
 146:	08 95       	ret

00000148 <lcd_init>:
  }
return 0;
}
void lcd_init()
{
 DDRA=0xff;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	8a bb       	out	0x1a, r24	; 26
 lcd_command(0x02); lcd_command(0x28); lcd_command(0x0E);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 152:	88 e2       	ldi	r24, 0x28	; 40
 154:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
 158:	8e e0       	ldi	r24, 0x0E	; 14
 15a:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
}
 15e:	08 95       	ret

00000160 <lcd_data>:
}


void lcd_data(char x)
{
  PORTA= x&0xf0;
 160:	28 2f       	mov	r18, r24
 162:	20 7f       	andi	r18, 0xF0	; 240
 164:	2b bb       	out	0x1b, r18	; 27
  PORTA=PORTA |(1<<rs);
 166:	d8 9a       	sbi	0x1b, 0	; 27
  PORTA=PORTA &~(1<<rw);
 168:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA |(1<<en);
 16a:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
 16c:	da 98       	cbi	0x1b, 2	; 27
 16e:	20 ed       	ldi	r18, 0xD0	; 208
 170:	37 e0       	ldi	r19, 0x07	; 7
 172:	f9 01       	movw	r30, r18
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_data+0x14>
  _delay_ms(1);

   PORTA= (x<<4)&0xf0;
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	54 e0       	ldi	r21, 0x04	; 4
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	5a 95       	dec	r21
 182:	e1 f7       	brne	.-8      	; 0x17c <lcd_data+0x1c>
 184:	8b bb       	out	0x1b, r24	; 27
  PORTA=PORTA |(1<<rs);
 186:	d8 9a       	sbi	0x1b, 0	; 27
  PORTA=PORTA &~(1<<rw);
 188:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA |(1<<en);
 18a:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
 18c:	da 98       	cbi	0x1b, 2	; 27
 18e:	c9 01       	movw	r24, r18
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_data+0x30>
  _delay_ms(1);
}
 194:	08 95       	ret

00000196 <lcd_string>:

void lcd_string(char *x)
{
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
 1a0:	08 ec       	ldi	r16, 0xC8	; 200
 1a2:	10 e0       	ldi	r17, 0x00	; 0
 1a4:	0a c0       	rjmp	.+20     	; 0x1ba <lcd_string+0x24>
  while(*x !='\0')
  {
    lcd_data(*x++);
 1a6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_data>
 1aa:	88 ee       	ldi	r24, 0xE8	; 232
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	f8 01       	movw	r30, r16
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_string+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b6:	d9 f7       	brne	.-10     	; 0x1ae <lcd_string+0x18>
 1b8:	21 96       	adiw	r28, 0x01	; 1
  _delay_ms(1);
}

void lcd_string(char *x)
{
  while(*x !='\0')
 1ba:	88 81       	ld	r24, Y
 1bc:	88 23       	and	r24, r24
 1be:	99 f7       	brne	.-26     	; 0x1a6 <lcd_string+0x10>
  {
    lcd_data(*x++);
	_delay_ms(100);
  }
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <main>:
  MCUCR=MCUCR|(1<<ISC00);
  sei();
}
int main()
{
  DDRB=DDRB|(1<<0);
 1ca:	b8 9a       	sbi	0x17, 0	; 23
  DDRD=DDRD &~ (1<<2);
 1cc:	8a 98       	cbi	0x11, 2	; 17
  DDRA=0xff;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	8a bb       	out	0x1a, r24	; 26
	_delay_ms(1000);
  }
}
void interrupt_init()
{
  GICR=GICR|(1<<INT0);
 1d2:	8b b7       	in	r24, 0x3b	; 59
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	8b bf       	out	0x3b, r24	; 59
  MCUCR=MCUCR|(1<<ISC00);
 1d8:	85 b7       	in	r24, 0x35	; 53
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	85 bf       	out	0x35, r24	; 53
  sei();
 1de:	78 94       	sei
{
  DDRB=DDRB|(1<<0);
  DDRD=DDRD &~ (1<<2);
  DDRA=0xff;
  interrupt_init();
  lcd_init();
 1e0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_init>
  while(1)
  {
    lcd_command(0x01);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 89 00 	call	0x112	; 0x112 <lcd_command>
    lcd_string("Welcome to Hell");
 1ea:	80 e6       	ldi	r24, 0x60	; 96
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_string>
 1f2:	f8 cf       	rjmp	.-16     	; 0x1e4 <main+0x1a>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
