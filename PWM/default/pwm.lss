
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000070  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000000e4  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000021  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000110  00000000  00000000  00000125  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ac  00000000  00000000  00000235  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000132  00000000  00000000  000002e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000be  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	13 c0       	rjmp	.+38     	; 0x6c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include<avr/io.h>
#include<util/delay.h>
int i;
int main()
{
  DDRB=DDRB|(1<<3); 
  48:	bb 9a       	sbi	0x17, 3	; 23
  TCNT2=0;
  4a:	14 bc       	out	0x24, r1	; 36
  TCCR2=0x69;
  4c:	89 e6       	ldi	r24, 0x69	; 105
  4e:	85 bd       	out	0x25, r24	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  50:	20 e7       	ldi	r18, 0x70	; 112
  52:	37 e1       	ldi	r19, 0x17	; 23
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	90 e0       	ldi	r25, 0x00	; 0
  while(1)
  {
  	for(i=0;i<=255;i++)
  	{
     OCR2=i;
  58:	83 bd       	out	0x23, r24	; 35
  5a:	f9 01       	movw	r30, r18
  5c:	31 97       	sbiw	r30, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <main+0x14>
  60:	01 96       	adiw	r24, 0x01	; 1
  DDRB=DDRB|(1<<3); 
  TCNT2=0;
  TCCR2=0x69;
  while(1)
  {
  	for(i=0;i<=255;i++)
  62:	41 e0       	ldi	r20, 0x01	; 1
  64:	80 30       	cpi	r24, 0x00	; 0
  66:	94 07       	cpc	r25, r20
  68:	a9 f3       	breq	.-22     	; 0x54 <main+0xc>
  6a:	f6 cf       	rjmp	.-20     	; 0x58 <main+0x10>

0000006c <_exit>:
  6c:	f8 94       	cli

0000006e <__stop_program>:
  6e:	ff cf       	rjmp	.-2      	; 0x6e <__stop_program>
