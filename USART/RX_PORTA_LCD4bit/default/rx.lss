
rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00000162  000001d6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005a  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000254  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000125  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000283  00000000  00000000  000005c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f2  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000046  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 00 	call	0x120	; 0x120 <main>
  8a:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <usart_init>:
 lcd_command(0x02);
 lcd_command(0x28);
 lcd_command(0x0E);
}
 void usart_init()
 {
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
 	UBRRL=51;
 	UCSRB=UCSRB|(1<<RXEN);
  96:	54 9a       	sbi	0x0a, 4	; 10
 	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
 }
  9e:	08 95       	ret

000000a0 <lcd_data>:
void lcd_data(char x)
{
  a0:	28 2f       	mov	r18, r24
  a2:	20 7f       	andi	r18, 0xF0	; 240
  a4:	2b bb       	out	0x1b, r18	; 27
  PORTA=x&0xf0;
  PORTA=PORTA | (1<<rs);
  a6:	d8 9a       	sbi	0x1b, 0	; 27
  PORTA=PORTA &~ (1<<rw);
  a8:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA | (1<<en);
  aa:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
  ac:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	20 ed       	ldi	r18, 0xD0	; 208
  b0:	37 e0       	ldi	r19, 0x07	; 7
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_data+0x14>
  _delay_ms(1);
  PORTA=(x<<4)&0xf0;
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	44 e0       	ldi	r20, 0x04	; 4
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	4a 95       	dec	r20
  c2:	e1 f7       	brne	.-8      	; 0xbc <lcd_data+0x1c>
  c4:	8b bb       	out	0x1b, r24	; 27
  PORTA=PORTA | (1<<rs);
  c6:	d8 9a       	sbi	0x1b, 0	; 27
  PORTA=PORTA &~ (1<<rw);
  c8:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA | (1<<en);
  ca:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
  cc:	da 98       	cbi	0x1b, 2	; 27
  ce:	c9 01       	movw	r24, r18
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_data+0x30>
  _delay_ms(1);
}
  d4:	08 95       	ret

000000d6 <lcd_command>:
void lcd_command(char x)
{
  d6:	28 2f       	mov	r18, r24
  d8:	20 7f       	andi	r18, 0xF0	; 240
  da:	2b bb       	out	0x1b, r18	; 27
  PORTA=x&0xf0;
  PORTA=PORTA &~ (1<<rs);
  dc:	d8 98       	cbi	0x1b, 0	; 27
  PORTA=PORTA &~ (1<<rw);
  de:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA | (1<<en);
  e0:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
  e2:	da 98       	cbi	0x1b, 2	; 27
  e4:	20 ed       	ldi	r18, 0xD0	; 208
  e6:	37 e0       	ldi	r19, 0x07	; 7
  e8:	f9 01       	movw	r30, r18
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_command+0x14>
  _delay_ms(1);
  PORTA=(x<<4)&0xf0;
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	54 e0       	ldi	r21, 0x04	; 4
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	5a 95       	dec	r21
  f8:	e1 f7       	brne	.-8      	; 0xf2 <lcd_command+0x1c>
  fa:	8b bb       	out	0x1b, r24	; 27
  PORTA=PORTA &~ (1<<rs);
  fc:	d8 98       	cbi	0x1b, 0	; 27
  PORTA=PORTA &~ (1<<rw);
  fe:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA | (1<<en);
 100:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
 102:	da 98       	cbi	0x1b, 2	; 27
 104:	c9 01       	movw	r24, r18
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_command+0x30>
  _delay_ms(1);
}
 10a:	08 95       	ret

0000010c <lcd_init>:
	 lcd_init();
	 }
   }
 }
void lcd_init()
{
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_command>
 lcd_command(0x02);
 lcd_command(0x28);
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_command>
 lcd_command(0x0E);
 118:	8e e0       	ldi	r24, 0x0E	; 14
 11a:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_command>
}
 11e:	08 95       	ret

00000120 <main>:
 void lcd_init();
 void lcd_command(char );
 void lcd_data(char );
 int i=0;
 int main()
 {
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8a bb       	out	0x1a, r24	; 26
 lcd_command(0x28);
 lcd_command(0x0E);
}
 void usart_init()
 {
 	UBRRL=51;
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	89 b9       	out	0x09, r24	; 9
 	UCSRB=UCSRB|(1<<RXEN);
 128:	54 9a       	sbi	0x0a, 4	; 10
 	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 12a:	80 b5       	in	r24, 0x20	; 32
 12c:	86 68       	ori	r24, 0x86	; 134
 12e:	80 bd       	out	0x20, r24	; 32
 int i=0;
 int main()
 {
   DDRA=0xff;
   usart_init();
   lcd_init();
 130:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_init>
   while(1)
   {
     while( (UCSRA&(1<<RXC))==0);
 134:	5f 9b       	sbis	0x0b, 7	; 11
 136:	fe cf       	rjmp	.-4      	; 0x134 <main+0x14>
	 lcd_data(UDR);
 138:	8c b1       	in	r24, 0x0c	; 12
 13a:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_data>
	 i++;
 13e:	80 91 60 00 	lds	r24, 0x0060
 142:	90 91 61 00 	lds	r25, 0x0061
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 61 00 	sts	0x0061, r25
 14c:	80 93 60 00 	sts	0x0060, r24
	 if(i>16)
 150:	41 97       	sbiw	r24, 0x11	; 17
 152:	84 f3       	brlt	.-32     	; 0x134 <main+0x14>
	 {
	 i=0;
 154:	10 92 61 00 	sts	0x0061, r1
 158:	10 92 60 00 	sts	0x0060, r1
 15c:	e9 cf       	rjmp	.-46     	; 0x130 <main+0x10>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
