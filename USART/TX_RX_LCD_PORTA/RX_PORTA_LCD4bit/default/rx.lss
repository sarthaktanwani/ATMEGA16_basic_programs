
rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000054  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000240  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000112  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000026b  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000007a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f9  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000046  00000000  00000000  000008fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <usart_init>:
 lcd_command(0x28);
 lcd_command(0x0E);
}
 void usart_init()
 {
 	UBRRL=51;
  6c:	83 e3       	ldi	r24, 0x33	; 51
  6e:	89 b9       	out	0x09, r24	; 9
 	UCSRB=UCSRB|(1<<RXEN);
  70:	54 9a       	sbi	0x0a, 4	; 10
 	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  72:	80 b5       	in	r24, 0x20	; 32
  74:	86 68       	ori	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
 }
  78:	08 95       	ret

0000007a <lcd_data>:
void lcd_data(char x)
{
  PORTA=x&0xf0;
  7a:	28 2f       	mov	r18, r24
  7c:	20 7f       	andi	r18, 0xF0	; 240
  7e:	2b bb       	out	0x1b, r18	; 27
  PORTA=PORTA | (1<<rs);
  80:	d8 9a       	sbi	0x1b, 0	; 27
  PORTA=PORTA &~ (1<<rw);
  82:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA | (1<<en);
  84:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
  86:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  88:	20 ed       	ldi	r18, 0xD0	; 208
  8a:	37 e0       	ldi	r19, 0x07	; 7
  8c:	f9 01       	movw	r30, r18
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_data+0x14>
  _delay_ms(1);
  PORTA=(x<<4)&0xf0;
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	44 e0       	ldi	r20, 0x04	; 4
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	4a 95       	dec	r20
  9c:	e1 f7       	brne	.-8      	; 0x96 <lcd_data+0x1c>
  9e:	8b bb       	out	0x1b, r24	; 27
  PORTA=PORTA | (1<<rs);
  a0:	d8 9a       	sbi	0x1b, 0	; 27
  PORTA=PORTA &~ (1<<rw);
  a2:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA | (1<<en);
  a4:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
  a6:	da 98       	cbi	0x1b, 2	; 27
  a8:	c9 01       	movw	r24, r18
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_data+0x30>
  _delay_ms(1);
}
  ae:	08 95       	ret

000000b0 <lcd_command>:
void lcd_command(char x)
{
  PORTA=x&0xf0;
  b0:	28 2f       	mov	r18, r24
  b2:	20 7f       	andi	r18, 0xF0	; 240
  b4:	2b bb       	out	0x1b, r18	; 27
  PORTA=PORTA &~ (1<<rs);
  b6:	d8 98       	cbi	0x1b, 0	; 27
  PORTA=PORTA &~ (1<<rw);
  b8:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA | (1<<en);
  ba:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
  bc:	da 98       	cbi	0x1b, 2	; 27
  be:	20 ed       	ldi	r18, 0xD0	; 208
  c0:	37 e0       	ldi	r19, 0x07	; 7
  c2:	f9 01       	movw	r30, r18
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0x14>
  _delay_ms(1);
  PORTA=(x<<4)&0xf0;
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	54 e0       	ldi	r21, 0x04	; 4
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	5a 95       	dec	r21
  d2:	e1 f7       	brne	.-8      	; 0xcc <lcd_command+0x1c>
  d4:	8b bb       	out	0x1b, r24	; 27
  PORTA=PORTA &~ (1<<rs);
  d6:	d8 98       	cbi	0x1b, 0	; 27
  PORTA=PORTA &~ (1<<rw);
  d8:	d9 98       	cbi	0x1b, 1	; 27
  PORTA=PORTA | (1<<en);
  da:	da 9a       	sbi	0x1b, 2	; 27
  PORTA=PORTA &~(1<<en);
  dc:	da 98       	cbi	0x1b, 2	; 27
  de:	c9 01       	movw	r24, r18
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x30>
  _delay_ms(1);
}
  e4:	08 95       	ret

000000e6 <lcd_init>:
	 lcd_data(UDR);
   }
 }
void lcd_init()
{
 lcd_command(0x02);
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
 lcd_command(0x28);
  ec:	88 e2       	ldi	r24, 0x28	; 40
  ee:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
 lcd_command(0x0E);
  f2:	8e e0       	ldi	r24, 0x0E	; 14
  f4:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
}
  f8:	08 95       	ret

000000fa <main>:
 void lcd_init();
 void lcd_command(char );
 void lcd_data(char );
 int main()
 {
   DDRA=0xff;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8a bb       	out	0x1a, r24	; 26
 lcd_command(0x28);
 lcd_command(0x0E);
}
 void usart_init()
 {
 	UBRRL=51;
  fe:	83 e3       	ldi	r24, 0x33	; 51
 100:	89 b9       	out	0x09, r24	; 9
 	UCSRB=UCSRB|(1<<RXEN);
 102:	54 9a       	sbi	0x0a, 4	; 10
 	UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 104:	80 b5       	in	r24, 0x20	; 32
 106:	86 68       	ori	r24, 0x86	; 134
 108:	80 bd       	out	0x20, r24	; 32
 void lcd_data(char );
 int main()
 {
   DDRA=0xff;
   usart_init();
   lcd_init();
 10a:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_init>
   while(1)
   {
     while( (UCSRA&(1<<RXC))==0);
 10e:	5f 9b       	sbis	0x0b, 7	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <main+0x14>
	 lcd_data(UDR);
 112:	8c b1       	in	r24, 0x0c	; 12
 114:	0e 94 3d 00 	call	0x7a	; 0x7a <lcd_data>
 118:	fa cf       	rjmp	.-12     	; 0x10e <main+0x14>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
