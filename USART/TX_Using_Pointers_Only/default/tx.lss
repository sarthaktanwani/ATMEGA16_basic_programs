
tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000022  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002e2  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011f  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000270  00000000  00000000  00000643  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d6  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000230  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000bea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<avr/io.h>
#include<util/delay.h>
void tx(char *);
int main()
{
 UBRRL=51;
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
 UCSRB=UCSRB|(1<<TXEN);
  86:	53 9a       	sbi	0x0a, 3	; 10
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 68       	ori	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	28 ec       	ldi	r18, 0xC8	; 200
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	0b c0       	rjmp	.+22     	; 0xae <main+0x2c>

void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  {
    UDR=*x++;
  98:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x18>
  9e:	88 ee       	ldi	r24, 0xE8	; 232
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	d9 f7       	brne	.-10     	; 0xa2 <main+0x20>

void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  {
    UDR=*x++;
  ac:	11 96       	adiw	r26, 0x01	; 1



void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  ae:	8c 91       	ld	r24, X
  b0:	88 23       	and	r24, r24
  b2:	91 f7       	brne	.-28     	; 0x98 <main+0x16>
  b4:	ac e6       	ldi	r26, 0x6C	; 108
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	0b c0       	rjmp	.+22     	; 0xd0 <main+0x4e>
  {
    UDR=*x++;
  ba:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <main+0x3a>
  c0:	88 ee       	ldi	r24, 0xE8	; 232
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	f9 01       	movw	r30, r18
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  cc:	d9 f7       	brne	.-10     	; 0xc4 <main+0x42>

void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  {
    UDR=*x++;
  ce:	11 96       	adiw	r26, 0x01	; 1



void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  d0:	8c 91       	ld	r24, X
  d2:	88 23       	and	r24, r24
  d4:	91 f7       	brne	.-28     	; 0xba <main+0x38>
  d6:	af e7       	ldi	r26, 0x7F	; 127
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	0b c0       	rjmp	.+22     	; 0xf2 <main+0x70>
  {
    UDR=*x++;
  dc:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  de:	5d 9b       	sbis	0x0b, 5	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <main+0x5c>
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	f9 01       	movw	r30, r18
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x64>

void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  {
    UDR=*x++;
  f0:	11 96       	adiw	r26, 0x01	; 1



void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  f2:	8c 91       	ld	r24, X
  f4:	88 23       	and	r24, r24
  f6:	91 f7       	brne	.-28     	; 0xdc <main+0x5a>
  f8:	a2 e9       	ldi	r26, 0x92	; 146
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	0b c0       	rjmp	.+22     	; 0x114 <main+0x92>
  {
    UDR=*x++;
  fe:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
 100:	5d 9b       	sbis	0x0b, 5	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <main+0x7e>
 104:	88 ee       	ldi	r24, 0xE8	; 232
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	f9 01       	movw	r30, r18
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	d9 f7       	brne	.-10     	; 0x108 <main+0x86>

void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  {
    UDR=*x++;
 112:	11 96       	adiw	r26, 0x01	; 1



void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
 114:	8c 91       	ld	r24, X
 116:	88 23       	and	r24, r24
 118:	91 f7       	brne	.-28     	; 0xfe <main+0x7c>
 11a:	a0 e6       	ldi	r26, 0x60	; 96
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	c7 cf       	rjmp	.-114    	; 0xae <main+0x2c>

00000120 <tx>:
}



void tx(char *x)// x==2000,*x='G'
{
 120:	dc 01       	movw	r26, r24
 122:	28 ec       	ldi	r18, 0xC8	; 200
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	0b c0       	rjmp	.+22     	; 0x13e <tx+0x1e>
  while(*x !='\0')
  {
    UDR=*x++;
 128:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
 12a:	5d 9b       	sbis	0x0b, 5	; 11
 12c:	fe cf       	rjmp	.-4      	; 0x12a <tx+0xa>
 12e:	88 ee       	ldi	r24, 0xE8	; 232
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	f9 01       	movw	r30, r18
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <tx+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d9 f7       	brne	.-10     	; 0x132 <tx+0x12>

void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  {
    UDR=*x++;
 13c:	11 96       	adiw	r26, 0x01	; 1



void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
 13e:	8c 91       	ld	r24, X
 140:	88 23       	and	r24, r24
 142:	91 f7       	brne	.-28     	; 0x128 <tx+0x8>
  {
    UDR=*x++;
	while( (UCSRA&(1<<UDRE))==0);
	_delay_ms(100);
  }
}
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
