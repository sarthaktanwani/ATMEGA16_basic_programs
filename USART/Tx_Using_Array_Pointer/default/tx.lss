
tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000000d4  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000034  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013c  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d7  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e4  00000000  00000000  000003cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000009d  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  00000581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
char msg1[]="GOD IS ONE\r";
char msg2[]="BUT WHO BELIEVES?\r";
void tx(char *);
int main()
{
 UBRRL=51;
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
 UCSRB=UCSRB|(1<<TXEN);
  86:	53 9a       	sbi	0x0a, 3	; 10
 UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 68       	ori	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	e0 e6       	ldi	r30, 0x60	; 96
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	04 c0       	rjmp	.+8      	; 0x9c <main+0x1a>

void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  {
    UDR=*x;
  94:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x14>
	x++;//2001//2002
  9a:	31 96       	adiw	r30, 0x01	; 1



void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  9c:	80 81       	ld	r24, Z
  9e:	88 23       	and	r24, r24
  a0:	c9 f7       	brne	.-14     	; 0x94 <main+0x12>
  a2:	ec e6       	ldi	r30, 0x6C	; 108
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <main+0x2e>
  {
    UDR=*x;
  a8:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x28>
	x++;//2001//2002
  ae:	31 96       	adiw	r30, 0x01	; 1



void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  b0:	80 81       	ld	r24, Z
  b2:	88 23       	and	r24, r24
  b4:	c9 f7       	brne	.-14     	; 0xa8 <main+0x26>
 tx(msg1);//2000
 tx(msg2);//3000


return 0;
}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <tx>:



void tx(char *x)// x==2000,*x='G'
{
  bc:	fc 01       	movw	r30, r24
  be:	04 c0       	rjmp	.+8      	; 0xc8 <tx+0xc>
  while(*x !='\0')
  {
    UDR=*x;
  c0:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <tx+0x6>
	x++;//2001//2002
  c6:	31 96       	adiw	r30, 0x01	; 1



void tx(char *x)// x==2000,*x='G'
{
  while(*x !='\0')
  c8:	80 81       	ld	r24, Z
  ca:	88 23       	and	r24, r24
  cc:	c9 f7       	brne	.-14     	; 0xc0 <tx+0x4>
  {
    UDR=*x;
	while( (UCSRA&(1<<UDRE))==0);
	x++;//2001//2002
  }
}
  ce:	08 95       	ret

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
